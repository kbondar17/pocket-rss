import logging
# from loguru import logger
from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from weedly_bot.loader import dp
from weedly_bot.loader import api_client

import logging
logger = logging.getLogger(__name__)

main_menu = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='üìù –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏'),
                                           KeyboardButton(text='üìñ –ß–∏—Ç–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏')],
                                          [KeyboardButton(text='‚ùì –û –±–æ—Ç–µ'),
                                           KeyboardButton(text='üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')],
                                          ], row_width=2
                                )

welcome_text = '*–≠—Ç–æ Pocket RSS*\n\n'\
               '–•–≤–∞—Ç–∏—Ç –∑–∞–ª–∏–ø–∞—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö. –ß–∏—Ç–∞–π —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ.\n\n'\
               '*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:* \n\n–ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫–∏ RSS-—Ñ–∏–¥–æ–≤ –ª—é–±–∏–º—ã—Ö –∏–∑–¥–∞–Ω–∏–π –∏ —Å–∞–π—Ç–æ–≤ –∏ —á–∏—Ç–∞–π –∏—Ö –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ. \n\n'\
               '–í –ø–æ–¥–ø–∏—Å–∫–∞—Ö —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n\n'\
               '–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö. Stay tuned!'


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    """–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = message.from_user.id
    user_name = message.from_user.username
    logger.debug('—é–∑–µ—Ä %s –Ω–∞–∂–∞–ª –Ω–∞ —Å—Ç–∞—Ä—Ç', message.from_user.id)

    if not api_client.users.check_if_user_exists(uid=user_id):
        api_client.users.add_user(uid=user_id, name=user_name)
        api_client.users.add_test_rss(uid=user_id)

    await message.answer(text=welcome_text, reply_markup=main_menu, parse_mode='Markdown')


@dp.callback_query_handler(text_contains='back_to_start')
async def start_2(call: types.CallbackQuery):
    await call.message.answer(text=welcome_text, reply_markup=main_menu, parse_mode='Markdown')


@dp.message_handler(text_contains='–û –±–æ—Ç–µ')
async def start(message: types.Message):
    await message.answer(text=welcome_text, reply_markup=main_menu, parse_mode='Markdown')
